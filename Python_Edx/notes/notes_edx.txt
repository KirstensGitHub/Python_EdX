basic if statement, syntax and spacing:

perc = 0.70

if perc > 0.00:
    print 'Aargh!'
elif perc > 0.60:
    print 'Pass'
elif perc > 0.75:
    print 'B'
else:
    print 'A'


NOTE: no need to "end" if statement!

random:
is is identity testing, == is equality testing

>>> a = 'pub'
>>> b = ''.join(['p', 'u', 'b'])
>>> a == b
True
>>> a is b
False


one '=' sets variable
two '==' checks value

import math
math.factorial(4)= 4*3*2*!
math.sqrt(4)= 2


user input
name = raw_input("what's your name?: ")


-----------------------

BASIC SYNTAX
———————————

10 % 3 = 1
	mod give remainder

~x   -  not x

3 < 7
	True
3 == 7
	False
3 != 7
	True
	(3 not equal 7)

x= z + 7
	changing z will not inherently change x


FUNCITON:

def funcitonName(inputVars):
	#here goes the body
	
	return ' something '

def times2(x)
	"""output of times2 returns twice its input
	   input x: a number (int or float)
	"""
	y = x * 2
	return y



DATATYPE PRIORITY
——————————

True + 3 = 4

hierarchy:
1 float
2 long
3 int
4 bool



LISTS AND STRINGS
—————————

myList = [2.7, 'Python', [1, 2, 3] ]

possible for string to have no character ('') 
& list to have no object ([])


[1, 2, 3] + [4, 5, 6] = [1, 2, 3, 4, 5, 6]
'Chocolate' + 'Milk' = 'ChocolateMilk'
CANNOT concat list and string

len(listORstringName)= length

x = [1, 2, 3]
3 * x = [1, 2, 3, 1, 2, 3, 1, 2, 3]



myString="I like pie"
 *zero indexed
 *spaces count!

myList=[3.14, 'p', [3, 1, 4]

INDEXING
can use positive and negative indexing
x[0]= 3.14
x[-1]=[3, 1, 4]

*note: negative indexing starts at -1

SLICING
access a range of indices
UP TO the larger number (not including)

y(7:10)
	'pie'

 y='I like pie!' 
y[-4:]
      'pie!'
      *notice, neg indexing counts left to right
      *ie smaller ## always on left

y[0:6:2]="Ilk"
	0 to 6, every 2


check if something contained in string

'pi' in y
	True

4 in y
	False


L = [ 'pi', "isn't", [4,2] ]
 
type(L[0])
	<type 'str'>
type(L[0:1])
	<type 'list'>

BACKWARD INDEX

M='You need parentheses for chemistry !'
M[-6:-19:-4]
	'shoe'

note, to reverse list order
List[::-1]


DEBUGGING
———————————

SyntaxError: EOL
	EOL- end of line

use backslash
	  print 'unless you\'re awesome, then YOU WIN!'



IMPORT MODULE
—————————
import random
	*give access to module and extras (like 'help')
	in this case you must use full module name to call

from random import *
	get all functions from module and nothing else
	can call functions without typing module name first

random
	choice(x) selects an item from string 'x' at random
	uniform(1,20) selects number from uniform distribution 1-20

DRAW WITH TURTLE

import turtle



RECURSION
	*remember fibonacci sequence example

base case- value of the simplest argument
recursive step- solution to smaller version of the problem


NOTE:
x=[1,2] is a LIST
y=(1,2) is a TUPLE

LISTS
mutable (can change its contents)

TUPLES
immutable- cannot use 'append'
hashable
	can use as a key in dictionary

you CAN add tuples together
	x=(1,2)
	x += (3,)
	x 
	(1, 2, 3)
	*STILL IMMUTABLE
	*have not changed original tuple, but created new one


good tricks:

x.index(5) -> tells where '5' is in the string/variable x
x.isalpha == True --> x is a letter (or string of letters?)
x.isnumeric == True --> is a number (I think both float or int)

to append:
x=4
y=[]
y.append(x)
y=[4]



LIST COMPREHENSIONS

act on each component of a list

MAP:
map(function_name, List)
--> outputs function applied to each element of list
--> map requires having/writing a function for the operation

LC:
[i*2 for i in L]

#multiply each element in a list by -7 if abs value > 4

return [-7*b for b in L if abs(b)>4]



BINARY

13 = 1x2^3  +  1x2^2  +  0x2^1  +  1x2^0

*every odd binary number must end in 1

easy to find decimal form of binary
example:
11010
has 1 in sixteens, eights, twos
so = 16+8+2 = 26


also can easily convert TO binary
example:
21

must end in 1 (odd number, 2^0)
subtract 1, get 20
divide by 2, get 10
even --> next digit to left is zero (01)

digit=0, no subtract

divide by 2, get 5
odd--> next digit to the left is a 1 (101)

subtract 1, get 4
divide by 2, get 2
another zero to the left (0101)

subtract 1, get 1
another 1 on the left (10101)


COMPRESSION

b&w image example

large portions of the image are similar
(large blocks of light and dark--> long strings of consecutive ones & zeros)

instead of listing each one and zero,
put 0, then binary for # of zeros in that chunk

then 1 & binary for number of 1s in that chunk

then need to be able to tell where each chunk of bit ends

can use padding (leading zeros) so each chunk of bits is the same size



optimal number of bits:
	depends on image
	high freq b&w change
		smaller bits
		bigger bits would waste on padding

THERE IS NO COMPRESSION STRATEGY THAT GURANTEES THE COMPRESSED IMAGE 
WILL BE SMALLER THAN THE ORIGINAL IMAGE

n-bits --> compress to no more than n-1 bits


BOOLEAN

True+3=4

True==1
False==0

'and' in boolean is multiplication
'or' in boolean is addition
'not' gives the opposite


Minterm Expansion Principle
	.....





Hardware
---------------------
Von Neuman architecture
	
CPU-  executes commands
memory- stores info

CPU
-chip with billions of transistors
-transistrs connect to form gates (and, or, etc)
-gates connected to do computations

-very small ammounts of fast memory, split into 'registers'
-'registers' store values being used by computer programs


Monte Carlo Approximations
-------------------------------
can approx probability


LOOPING:

while True
	*runs forever

break
	*end loop

user input
x=input("type your input here: ")

	

2D ARRAYS
-------------------
x=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
x[1] = [1, 2, 3]
x[1][1]


use += to add to contents of an array

In [6]: x
Out[6]: [[5, 2, 3], [4, 5, 6], [7, 8, 9]]

In [7]: x[0][0]+=6

In [8]: x
Out[8]: [[11, 2, 3], [4, 5, 6], [7, 8, 9]]


DICTIONARIES
------------------
key and values

favoriteFoods=
{ 
	'Theresa' : ['pizza, cheese']
	'Maria' : ['chocolate, candy']
	'Kyle: ['steak', 'salmon']
}

for x in favoriteFoods.keys():
	favoriteFoods[x][0]='ice cream'


favoriteFoods=
{
        'Theresa' : ['ice cream, cheese']
        'Maria' : ['ice cream, candy']
        'Kyle: ['ice cream', 'salmon']
}


in temrinal, to make dictionary and add entries....

ages={}
ages['Theresa']=8
ages['Maria']=12

ages={'Theresa':8, 'Maria':12}

ages.keys()
>>>>['Theresa', 'Maria']
ages.values()
>>>>[8, 12]


OBJECT and CLASSES
----------------------
organizing things in terms of classes is near
-avoids repetition of code when we want to repeat many things

objects are specific instances of the class


class Person:

	def __init__(self, inputName, inputAge, inputOccupation)
		self.name = inputName
		self.age = inputAge
		self.occupation = inputOccupation

*self should always come first*
see ClasesObjects.py


TUPLES
------------
immutable 0 can't change the contents
tuples can be dictionary keys, lists can't
can't have sinlge-element tuple
	-is interpreted as whatever the single entry is
	-for example p=(1)
	-type(p)=int

however, you can overwrite a tuple, by reassigning tuple name as if from scratch

INPUTS
--------------
a variable passed into a function

default input values
def f(x=3, y=17):
    return 10*x + y

SO:
call def() 
	uses x=3, y=17
call def(1)
	x=1, y=17

call def(4,2)
        x=4, y=2



